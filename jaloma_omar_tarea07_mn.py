# -*- coding: utf-8 -*-
"""Jaloma_Omar_Tarea07_MN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12gOiL0s5Ea-pY5zYALMimnq7hQ8PtKZM
"""

import numpy as np

#Problema 4

#Inciso (A)

def GramSchmidt_QR(A):
  m,n=A.shape
  Qt=np.zeros((n,m))
  Rt=np.zeros((n,n))
  At=A.transpose() #Transponemos a A para poder jugar con las columnas (en este caso renglones)
  for i in range(n):
    if i==0:
      Qt[i]=At[i]
      Qt[i]=Qt[i]/np.linalg.norm(Qt[i])
      Rt[i][i]=np.dot(At[i], Qt[i])
    else:
      tmp=np.array([(np.dot(Qt[j], At[i])/(np.linalg.norm(Qt[j])**2))*Qt[j] for j in range(i)])
      Qt[i]=At[i]-tmp.sum(axis=0)
      Qt[i]=Qt[i]/np.linalg.norm(Qt[i])
      for j in range(i+1):
        Rt[i][j]=np.dot(At[i], Qt[j])
  R=Rt.transpose()
  Q=Qt.transpose()
  return(Q,R)

#Caso 1----MUY SIMPLE---
A=np.array([2,0,0,0,0,1])
A=A.reshape(3,2)

Q,R=GramSchmidt_QR(A)
print(Q)
print(R)
print(A)
print(np.matmul(Q,R))
print('\n ---------------------------------------------- \n')

#Caso 1 --- INCISO (B) A_1

A=np.array([-10,7,13,11,2,1,-5,3,-6,3,13,-3,16,-16,-2,5,2,1,-5,-7])
A=A.reshape(5,4)

Q,R=GramSchmidt_QR(A)
print(Q)
print(R)
print(A)
print(np.matmul(Q,R))

print('\n ---------------------------------------------------------------------\n')

#Caso 2 ---- INCISO (B) A_2

A=np.array([1,1,1,1,1,2,1,1,3])
A=A.reshape(3,3)

Q,R=GramSchmidt_QR(A)
print(Q)
print(R)
print(A)
print(np.matmul(Q,R)) #Aquí es erróneo por que A no es de rango completo cierto? No cumple con las hipótesis sobre las cuales se supone que funciona el algoritmo

print('\n No Funciona porque A no es de rango completo \n---------------------------------------------------------------------------------------------------\n')

#Caso 3 ---- INCISO (B) A_3

A=np.array([1,1,1,1,1+1e-12,2,1,1,3])
A=A.reshape(3,3)

Q,R=GramSchmidt_QR(A)
print(Q)
print(R)
print(A)
print(np.matmul(Q,R))

#--------------------------------------------------------------------------

# Problema 5

def HouseHolder_QR(A):

import numpy as np



A=np.array([1,1,0,1])
B=np.array([1,1,1,2])
At=A.transpose()
print(At)
s=np.array([A,A,A,A,A])
tmp=np.array([s[i] for i in range(3)])
print(tmp.sum(axis=0))