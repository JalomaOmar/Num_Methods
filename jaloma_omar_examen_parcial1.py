# -*- coding: utf-8 -*-
"""Jaloma_Omar_Examen_Parcial1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12-VpG8yuInJ6voBnkJxeoCAud_60-dgR
"""

import numpy as np

def GaussSeidelInverso(A, b, x0=None, tol=1e-8):
    n=A.shape[0] #n será la dimensión de la matriz
    K=0 #K es el número de iteración
    err=1+tol #err es el error relativo
    x=np.empty(n) #creamos un vector de ceros
    x.fill(0)
    xold=x0
    n=n-1
    while(err>tol):
      for i in range(n+1):
        w=(list(A[n-i][:n-i]))+(list(A[n-i][n-i+1:]))
        z=(list(x[:n-i]))+(list(x[n-i+1:]))
        w=np.array(w)
        z=np.array(z)
        x[n-i]=(1/A[n-i][n-i])*(-np.dot(w,z)+b[n-i]) #Aquí reside bajo como definimos los índices el método inverso
      err=(max(np.subtract(x,xold))/max(x)) #Aquí actualizamos el error
      xold=x
      K=K+1
    return([x,K])

#CASO MUY SIMPLE para verificar que funciona
x0=np.empty(2)
x0.fill(0)
A=np.array([[1,0],[0,1]])
b=[1,1]

S=GaussSeidelInverso(A,b,x0)
print(S)
print('----------')
#CASO UN POCO MENOS SIMPLE 

x0=np.empty(3)
x0.fill(0)
A=np.array([[1,1,1],[0,1,1], [0,0,1]])
b=[1, 2/3, 1/3]

S=GaussSeidelInverso(A,b, x0)
print(S)
print('---------')

#El caso planteado
N=100
A=np.arange(N*N)
A.fill(0)
for i in range(N):
  j=0
  for j in range(N):
    if j==i-1:
      A[i*N+j]=-1
    if j==i:
      A[i*N+j]=2
    if j==i+1:
      A[i*N+j]=-1
    
A.reshape(N,N)

b=np.arange(N)
b.fill(1)
x0=np.empty(N)
x0.fill(0)

A=np.array(A).reshape((N,N))
#print(A)
S=GaussSeidelInverso(A,b,x0) #Aquí se resuelve el sistema
print(S)